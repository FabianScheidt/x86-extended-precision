from x86_extended_precision.tests.utils import parse_double, parse_extended


def test_one() -> None:
    d = "0     01111111111             0000000000000000000000000000000000000000000000000000"
    e = "0 011111111111111 1000000000000000000000000000000000000000000000000000000000000000"
    assert parse_double(d) == 1.0
    assert parse_extended(e) == 1.0


def test_two() -> None:
    d = "0     10000000000             0000000000000000000000000000000000000000000000000000"
    e = "0 100000000000000 1000000000000000000000000000000000000000000000000000000000000000"
    assert parse_double(d) == 2.0
    assert parse_extended(e) == 2.0


def test_negative_two() -> None:
    d = "1     10000000000             0000000000000000000000000000000000000000000000000000"
    e = "1 100000000000000 1000000000000000000000000000000000000000000000000000000000000000"
    assert parse_double(d) == -2.0
    assert parse_extended(e) == -2.0


def test_three() -> None:
    d = "0     10000000000             1000000000000000000000000000000000000000000000000000"
    e = "0 100000000000000 1100000000000000000000000000000000000000000000000000000000000000"
    assert parse_double(d) == 3.0
    assert parse_extended(e) == 3.0


def test_twentythree() -> None:
    d = "0     10000000011             0111000000000000000000000000000000000000000000000000"
    e = "0 100000000000011 1011100000000000000000000000000000000000000000000000000000000000"
    assert parse_double(d) == 23.0
    assert parse_extended(e) == 23.0


def test_min_subnormal_positive() -> None:
    d = "0     00000000000             0000000000000000000000000000000000000000000000000001"
    e = "0 011110000000000 1000000000000000000000000000000000000000000000000000100000000000"
    assert parse_extended(e) > 0
    assert parse_extended(e) == parse_double(d)


def test_max_subnormal() -> None:
    d = "0     00000000000             1111111111111111111111111111111111111111111111111111"
    e = "0 011110000000000 1111111111111111111111111111111111111111111111111111100000000000"
    assert parse_extended(e) > 0
    assert parse_extended(e) == parse_double(d)


def test_min_normal_positive() -> None:
    d = "0     00000000001             0000000000000000000000000000000000000000000000000000"
    e = "0 011110000000001 1000000000000000000000000000000000000000000000000000000000000000"
    assert parse_extended(e) > 0
    assert parse_extended(e) == parse_double(d)


def test_max() -> None:
    d = "0     11111111110             1111111111111111111111111111111111111111111111111111"
    e = "0 100001111111110 1111111111111111111111111111111111111111111111111111100000000000"
    assert parse_extended(e) > 0
    assert parse_extended(e) == parse_double(d)
